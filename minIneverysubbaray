#include <bits/stdc++.h>
using namespace std;

void printMinOfSubarrays(const vector<int> &arr, int k)
{
    multiset<int> s;
    for (int i = 0; i < arr.size(); ++i)
    {
        s.insert(arr[i]);


        if (i >= k)
        {
            s.erase(s.find(arr[i - k]));
        }


        if (i >= k - 1)
        {
            cout << *s.begin() << endl;
        }
    }
}


int main()
{
    // Example usage:
    vector<int> arr = {3, 1, 4, 2, 8, 6, 5, 7};
    int k = 3;

    cout << "Minimum of each " << k << "-size subarray:" << endl;
    printMinOfSubarrays(arr, k);
    
    return 0;
}

///////////////////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

struct monotone_deque
{
    deque<int> dq;

    void insert(int x)
    { // O(k)
        while (!dq.empty() && dq.back() > x)
            dq.pop_back();
        dq.push_back(x);
    }
    void erase(int x)
    { // O(1)
        if (dq.front() == x)
            dq.pop_front();
    }
    int getmin()
    { // O(1)
        return dq.front();
    }
};


int main()
{ // O(n)
    int n, k;
    cin >> n >> k;
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    monotone_deque mt;
    for (int i = 0; i < n; i++)
    {                      // O(n)
        mt.insert(arr[i]); // O(1)
        if ((i - k) >= 0)
            mt.erase(arr[i - k]); // O(1)
        if (i >= (k - 1))
            cout << mt.getmin() << endl; // O(1)
    }
}

////////////////////// my code ////////////////////////

#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define int long long

struct ds{
    deque<int>dq;

    void add(int x){
        while(dq.size() && dq.back()<x){
            dq.pop_back();
        }
        dq.push_back(x);
    }
    void rem(int x){
        if(dq.front()==x){
            dq.pop_front();
        }
    }
    int getMx(){
     
        return dq.front();
       
    }

};

const int M=1e9+7;
const long long N=1e17+9;



void solve() {
    ds q;
  int n,k;cin>>n>>k;
  int v[n],b[n-k+1];
  for(int &i:v)cin>>i;

  for(int i=0;i<n;i++){
    q.add(v[i]);
    if(i-k>=0)q.rem(v[i-k]);
    if(i>=k-1)b[i-k+1]=q.getMx();
  }

    for(int i:b){
        cout<<i<<" ";
    }
    cout<<endl;
  
}


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    
    int _t=1;
    cin >> _t;
    while (_t--){
        solve();
    }
    return 0;
}
